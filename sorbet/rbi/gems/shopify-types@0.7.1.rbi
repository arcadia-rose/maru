# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `shopify-types` gem.
# Please instead update this file by running `bin/tapioca gem shopify-types`.

# typed: true

class Module
  include T::Sig
end

# source://shopify-types//lib/shopify/types/version.rb#3
module Shopify; end

# source://shopify-types//lib/shopify/types/version.rb#4
module Shopify::Types
  class << self
    # source://shopify-types//lib/shopify/types.rb#12
    def eager_load!; end
  end
end

# source://shopify-types//lib/shopify/types/error.rb#5
class Shopify::Types::Error < ::StandardError; end

# NOTE: This project uses semantic versioning
#
# Given a version number MAJOR.MINOR.PATCH, increment the:
#   MAJOR version when you make incompatible API changes,
#   MINOR version when you add functionality in a backwards compatible manner, and
#   PATCH version when you make backwards compatible bug fixes.
#
# See: https://semver.org
#
# source://shopify-types//lib/shopify/types/version.rb#13
Shopify::Types::VERSION = T.let(T.unsafe(nil), String)

# source://shopify-types//lib/shopify/types/value_object.rb#5
module T::Props
  mixes_in_class_methods ::T::Props::ClassMethods
end

# ValueObject
#
# Including this module into any class that includes T::Props, such as a T::Struct, will change the way equality is
# handled to match the behavior for regular Ruby structs. That is, objects will be compared based on their values
# and not their identities. After including this module, two T::Struct objects will be considered to be equal if
# their classes, prop definitions and prop values all match.
#
# source://shopify-types//lib/shopify/types/value_object.rb#12
module T::Props::ValueObject
  # A struct is equal to another if the classes and all prop definitions and values are the same
  #
  # source://shopify-types//lib/shopify/types/value_object.rb#17
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://shopify-types//lib/shopify/types/value_object.rb#30
  sig { params(other: T.untyped).returns(T::Boolean) }
  def eql?(other); end

  # Match Struct#hash by using both the class and all prop definitions and values to calculate the hash
  #
  # source://shopify-types//lib/shopify/types/value_object.rb#36
  sig { returns(::Integer) }
  def hash; end

  # source://shopify-types//lib/shopify/types/value_object.rb#44
  sig { returns(::String) }
  def to_s; end
end
