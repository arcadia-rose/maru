module Maru
  module Nix
    class Flake
      def initialize(
        description: "A Nix Flake auto-generated by Maru",
        outputs:
      )
        @description = description
        @inputs = outputs.flat_map(&:dependencies).uniq(&:name)
        @outputs = consolidate(outputs + default_outputs)
      end

      def to_nix(system)
        <<~NIX
        {
          description = "#{@description}";

          inputs = {
            #{@inputs.map do |input|
              input.to_nix(system)
            end.join("\n")}
          };

          outputs = inputs: {
            #{@outputs.map do |output|
              output.to_nix(system) + " inputs;"
            end.join("\n")}
          };
        }
        NIX
      end

      private

      def consolidate(outputs)
        dev_shells = outputs
          .select { |output| output.is_a?(Maru::Nix::DevShell) }
          .group_by(&:name)
          .values
          .map do |shells|
            shells.reduce { |shell, next_shell| shell.merge(next_shell) }
          end

        others = outputs.reject { |output| output.is_a?(Maru::Nix::DevShell) }

        dev_shells + others
      end

      def default_outputs
        [ default_formatter ]
      end

      def default_formatter
        Maru::Nix::Formatter.new("nixfmt")
      end
    end
  end
end
